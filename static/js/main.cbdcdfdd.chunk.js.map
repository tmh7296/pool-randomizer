{"version":3,"sources":["Entry.js","Output.js","Container.js","App.js","reportWebVitals.js","index.js"],"names":["Entry","props","updateEntry","bind","field","event","this","id","update","target","value","name","numBlocks","remove","className","type","onChange","e","onClick","Component","Output","output","generateOrder","map","idx","Container","state","entries","addEntry","removeEntry","genOrder","oldEntries","push","length","setState","find","el","indexOf","splice","newOutput","forEach","entry","i","shuffleArray","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cbdcdfdd.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Entry extends Component {\n    constructor(props) {\n        super(props);\n        this.updateEntry = this.updateEntry.bind(this);\n    }\n\n    updateEntry(field, event) {\n        const {id, update} = this.props;\n        update(id, field, event.target.value)\n    }\n\n    render() {\n        const {name, numBlocks, remove, id} = this.props;\n        return (\n            <div className=\"entry\">\n                <div className=\"inputs\">\n                    <input className=\"name\" type=\"text\" value={name} onChange={e => this.updateEntry(\"name\", e)}></input>\n                    <input className=\"numBlocks\" type=\"number\" value={numBlocks} onChange={e => this.updateEntry(\"numBlocks\", e)}></input>\n                </div>\n                <button onClick={() => {remove(id)}}>Remove</button>\n            </div>\n        )\n    }\n}\n\nexport default Entry;","import React, {Component} from 'react';\n\nclass Output extends Component {\n    render() {\n        const {output, generateOrder} = this.props;\n        return (\n            <div className=\"output\">\n                <button className=\"groupButton\" onClick={generateOrder}>Generate Order</button>\n                <div className=\"output-order\">\n                    {output.map((name, idx) => \n                        <div className=\"output-item\" key={idx}>{`${idx + 1}. ${name}`}</div>\n                    )}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Output;","import React, {Component} from 'react';\nimport Entry from './Entry';\nimport Output from './Output';\n\nclass Container extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            output: [],\n            entries: [{id: 1, name: '', numBlocks: ''}]\n        }\n\n        this.addEntry = this.addEntry.bind(this);\n        this.updateEntry = this.updateEntry.bind(this);\n        this.removeEntry = this.removeEntry.bind(this);\n        this.genOrder = this.genOrder.bind(this);\n    }\n\n    addEntry() {\n        const {entries} = this.state;\n        const oldEntries = [...entries];\n        oldEntries.push({id: oldEntries.length + 1, name: '', numBlocks: ''})\n        this.setState({entries: oldEntries});\n    }\n\n    updateEntry(id, field, value) {\n        const {entries} = this.state;\n        const oldEntries = [...entries];\n        const entry = oldEntries.find(el => el.id === id);\n        entry[field] = value;\n        this.setState({entries: oldEntries});\n    }\n\n    removeEntry(id) {\n        const {entries} = this.state;\n        const oldEntries = [...entries];\n        const el = oldEntries.find(el => el.id === id);\n        const idx = oldEntries.indexOf(el);\n\n        oldEntries.splice(idx, 1);\n        this.setState({entries: oldEntries});\n    }\n\n    genOrder() {\n        const {entries} = this.state;\n        const oldEntries = [...entries];\n\n        let newOutput = [];\n        oldEntries.forEach(entry => {\n            if(entry.name !== '' && entry.numBlocks > 0){\n                for(let i = 0; i < entry.numBlocks; i++){\n                    newOutput.push(entry.name);\n                }\n            }\n        })\n\n        newOutput = this.shuffleArray(newOutput);\n        this.setState({output: newOutput});\n    }\n\n    shuffleArray(array) {\n        var currentIndex = array.length, temporaryValue, randomIndex;\n\n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n      \n          // Pick a remaining element...\n          randomIndex = Math.floor(Math.random() * currentIndex);\n          currentIndex -= 1;\n      \n          // And swap it with the current element.\n          temporaryValue = array[currentIndex];\n          array[currentIndex] = array[randomIndex];\n          array[randomIndex] = temporaryValue;\n        }\n      \n        return array;\n    }\n\n    render() {\n        const {output, entries} = this.state;\n        \n        return (\n            <div id=\"container\">\n                <div className=\"heading\">\n                    <h3 className=\"header\">Name</h3>\n                    <h3 className=\"header\">Number of blocks</h3>\n                </div>\n                <div className=\"entries\">\n                    {entries.map(entry => \n                        <Entry key={entry.id} id={entry.id} name={entry.name} numBlocks={entry.numBlocks} update={this.updateEntry} remove={this.removeEntry}></Entry>\n                    )}\n                </div>\n                <button className=\"groupButton\" onClick={this.addEntry}>Add A Person</button>\n                <Output generateOrder={this.genOrder} output={output} />\n            </div>\n        )\n    }\n}\n\nexport default Container;","import './App.css';\nimport Container from './Container';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}